kubectl explain deployment.spec.template ### describe objects and give explanation about smt. 
kubectl patch istiooperator gt-sol-dev-controlplane-01    -p '{"metadata":{"finalizers":null}}' --type=merge -n gt-sol-dev-controlplane-01 ### delete io by remove finalizers 
kubectl cluster-info # get info about your cluster
kubectl config --kubeconfig=kubconfig view # to get info about kubeconfig 
kubectl config current-context             # check which one conffig do you use 
export KUBECONFIG=~/.kube/kubconfig'.      # add config by default  
oc patch daemonset/dns-default -n openshift-dns --type='json' --patch "$(cat ose-dns-default-patch-changed.yaml)" # add static record to dns 
kubectl config set-context --current --user=admin # for example change context to admin
oc login --token uqiueriuqwfhqf                   # login by token 
kubectl version --short # show version for kubernetes cluster and kubectl version in short output
files ca.crt ca.key in dir /etc/kubernetes/pki used for sign certificate user 
kubectl config set-cluster k8s-solution_auto-dev-pub --server=https://xx.xx.xx.xx:6443 # add cluster 
kubectl label nodes <your-node-name> disktype=ssd # set label for your nodes 
kubectl label ns label-ns test-label=yes # set new label for ns 
kubectl api-resources --sort-by name -o wide | grep serviceaccount # get verbs and resources for kubernetes
docker image ls --digests <your private registry url>/k8s/etcd
oc create secret docker-registry <name registry> --docker-server=<your private registry>--docker-username=<login your registry> --docker-password=<password for registry>
skopeo --override-os linux copy --preserve-digests docker://bitnami/etcd docker://<your private registry>k8s/etcd # copy image from docker hub to private 
oc whoami --show-console # show console url
oc edit console.config.openshift.io cluster 
kubectl apply -f -R . # apply all manifests in current dir 
kubectl api-resources # to get all resources
kubectl get events -n <namespace> --sort-by='.lastTimestamp' # get events by time 
oc get project --selector <key>=<value>  # show namespaces with label 
etcdctl get / --prefix --keys-only  # show all keys 
etcdctl get /kubernetes.io/configmaps/openshift-etcd/configmap-etcd-defrag # get details about key 
oc get node   --selector='apps.kubernetes.io/service=prometheus-istio' # to get nodes qwith selector
kubectl auth can-i create clusterrole # check what can do user sa 
https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/ ### debugging dns 
### delete pods one by one ###
PODS_COREDNS=$(kubectl get pods   --selector=k8s-app=kube-dns -n kube-system  | awk '{print $1}') # get pods with label 
for i in $PODS_COREDNS; do kubectl delete pod $i -n kube-system; done
### delete pods one by one ###
chroot /host # chroot to node from debug node  
### https://nigelpoulton.com/why-you-cant-ping-a-kubernetes-service/ ### why you can't ping service 
ss -s && free -g  ### show established connection for node and free mem
kubectl create rolebinding test-admin-rb --serviceaccount=test-namespace:test-admin --clusterrole=admin  -n test-namespace # add cluster role admin to ns with rolebinding
echo secret | base64 decode ### decode secret from secrets 
openssl x509 -text -noout -in <file-with-certificate>
kubectl label  namespace tribe-om-dev-alrt   istio/member-of- ### how to delete label from namespace (labes was stio/member-of=gt-sol-dev-controlplane-01) use for this  character - 
kubectl label nodes <your-node-name> disktype=ssd
kubectl get secrets nexus-registry  -n istio-operator -o yaml | grep .dockerconfigjson: | sed -e 's/  .dockerconfigjson: //g' | base64 -d ### get only token and deencrypt it
kubectl apply -f ./ -n syn-data-plane-01 ### apply multiple yaml 
kubectl get pods -v=6 ### verbose mode for kubectl also it may be -v=7 or -v=8
oc adm policy who-can use scc anyuid ### to check who can use scc 
kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "myregistrykey"}]}' ### add imagePullSecret to sa
kubectl get pods -o=jsonpath='{.items..resources.requests}'-n <namespace> ### to get limits request for all pods in namespace
kubectl annotate  ns ns-selector  scheduler.alpha.kubernetes.io/node-selector="type=worker" ### k8s for pod without nodeSelector
kubectl annotate ns ns-selector openshift.io/node-selector="type=worker" ### openshift for pod without nodeSelector
watch "kubectl get io -A && kubectl get pods -n istio-syn-01" ### to watch pods and io kind 
kubectl delete io istio-default -n istio-syn-01 & kubectl get io istio-default  -n istio-syn-01  -o=json | jq '.metadata.finalizers = null' | kubectl apply -f -
kubectl get clusterversion ### get version for ocp and okd 
kubectl delete rs -l app=istio-egressgateway -n istio-syn-01 ### delete rs only with label
kubectl create deployment debug-test --image=registry.debug-nginx/debug-pod:1.3 --port=8080 --namespace=istio-syn-02  ### create deployment by command 
kubectl expose deployment debug-test  --name=debug-test-svc --port=8080 --target-port=80 --type=ClusterIP    -n istio-syn-02 ### create svc by command
kubectl create ns debug-ns --dry-run=client -o yaml > debug-pod/templates/namespace.yaml ### create template with kubectl 
k get ns --no-headers | head -2 ### get ns without NAME STATUS AGE headers
oc expose svc prometheus  --name route-prometheus --hostname <your-fqdn>
kubectl label node worker2 node-role.kubernetes.io/worker=worker ### set role worker for node worker
kubectl get pods -n $i --ignore-not-found=true ###  ignore output  "No resources found"
kubectl get io,pods -n test-cp ### get istio operator and pods in namespace test-cp
kubectl get secrets -n namespace image-pull-secret-auto -o  json | jq '.data.".dockerconfigjson"' ### get secret only 
 jq -r '.data.".dockerconfigjson"' | base64 -d  ### -r raw output get value without quotes 
### get and decode data from kubeconfig with cat grep and awk
cat  ./kubeconfig |grep client-certificate-data | awk -F ' ' '{print $2}' |base64 -d > ./client-cert.pem
cat  ./kubeconfig |grep client-key-data | awk -F ' ' '{print $2}' |base64 -d > ./client-key.pem
APISERVER=`cat  ./kubeconfig |grep server | awk -F ' ' '{print $2}'`
k rollout  history  deployment test-deploy  -n vlku2 ### show deploy revision 
k rollout  undo   deployment test-deploy --to-revision=2  -n vlku2 ### rollout to revision 2
kubectl create -f deployment.yaml --record ### add record to metadata
k   create configmap files  --from-file=nslist --from-file=quota.yaml --from-file=limitrange.yaml  -n vlku4 ### create cm with mltiple files
k create configmap files  --from-file=_namespacelist --from-file=_resourcequota.yaml --from-file=_limitrange.yaml --from-file=_net-attach-def.yaml  -o yaml --dry-run=client > configmap-files.yaml 
k create namespace my-awesome-project-6  --as=system:serviceaccount:service-account-admin:ns-admin ### create namespaces with service account (sa already has crb with cluster-admin)
